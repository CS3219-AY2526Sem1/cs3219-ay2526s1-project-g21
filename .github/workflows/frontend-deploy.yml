name: frontend-deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: peerprep-frontend
    env:
      VITE_USER_API_BASE: ${{ secrets.VITE_USER_API_BASE }}
      VITE_QUESTION_API_BASE: ${{ secrets.VITE_QUESTION_API_BASE }}
      VITE_MATCH_API_BASE: ${{ secrets.VITE_MATCH_API_BASE }}
      VITE_MATCH_WEBSOCKET_BASE: ${{ secrets.VITE_MATCH_WEBSOCKET_BASE }}
      VITE_COLLAB_API_BASE: ${{ secrets.VITE_COLLAB_API_BASE }}
      VITE_COLLAB_WEBSOCKET_BASE: ${{ secrets.VITE_COLLAB_WEBSOCKET_BASE }}
      VITE_VOICE_API_BASE: ${{ secrets.VITE_VOICE_API_BASE }}
      VITE_VOICE_WEBSOCKET_BASE: ${{ secrets.VITE_VOICE_WEBSOCKET_BASE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      FRONTEND_S3_BUCKET: ${{ secrets.FRONTEND_S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: peerprep-frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate production env file
        run: |
          cat <<'EOF' > .env.production
          VITE_USER_API_BASE=${VITE_USER_API_BASE}
          VITE_QUESTION_API_BASE=${VITE_QUESTION_API_BASE}
          VITE_MATCH_API_BASE=${VITE_MATCH_API_BASE}
          VITE_MATCH_WEBSOCKET_BASE=${VITE_MATCH_WEBSOCKET_BASE}
          VITE_COLLAB_API_BASE=${VITE_COLLAB_API_BASE}
          VITE_COLLAB_WEBSOCKET_BASE=${VITE_COLLAB_WEBSOCKET_BASE}
          VITE_VOICE_API_BASE=${VITE_VOICE_API_BASE}
          VITE_VOICE_WEBSOCKET_BASE=${VITE_VOICE_WEBSOCKET_BASE}
          EOF

      - name: Build frontend
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync assets to S3
        run: aws s3 sync dist "s3://${FRONTEND_S3_BUCKET}" --delete

      - name: Invalidate CloudFront cache
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: aws cloudfront create-invalidation --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" --paths "/*"
