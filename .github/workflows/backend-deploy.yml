name: backend-deploy

on:
  push:
    branches: ["master"]
    paths:
      - "services/**"
      - "copilot/**"
      - ".github/workflows/backend-deploy.yml"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect service changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api-gateway:
              - "services/api-gateway/**"
              - "copilot/api-gateway/**"
            collab:
              - "services/collab/**"
              - "copilot/collab/**"
            match:
              - "services/match/**"
              - "copilot/match/**"
            question:
              - "services/question/**"
              - "copilot/question/**"
            user:
              - "services/user/**"
              - "copilot/user/**"
            voice:
              - "services/voice/**"
              - "copilot/voice/**"
            grafana:
              - "monitoring/grafana/**"
              - "copilot/grafana/**"
            prometheus:
              - "monitoring/prometheus/**"
              - "copilot/prometheus/**"

      - name: Build deployment matrix
        id: set-matrix
        env:
          API_GATEWAY_CHANGED: ${{ steps.changes.outputs.api-gateway }}
          COLL_CHANGED: ${{ steps.changes.outputs.collab }}
          MATCH_CHANGED: ${{ steps.changes.outputs.match }}
          QUESTION_CHANGED: ${{ steps.changes.outputs.question }}
          USER_CHANGED: ${{ steps.changes.outputs.user }}
          VOICE_CHANGED: ${{ steps.changes.outputs.voice }}
          GRAFANA_CHANGED: ${{ steps.changes.outputs.grafana }}
          PROMETHEUS_CHANGED: ${{ steps.changes.outputs.prometheus }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          python - <<'PY'
          import json
          import os

          services = []
          mapping = {
              "api-gateway": os.environ.get("API_GATEWAY_CHANGED", "false"),
              "collab": os.environ.get("COLL_CHANGED", "false"),
              "match": os.environ.get("MATCH_CHANGED", "false"),
              "question": os.environ.get("QUESTION_CHANGED", "false"),
              "user": os.environ.get("USER_CHANGED", "false"),
              "voice": os.environ.get("VOICE_CHANGED", "false"),
              "grafana": os.environ.get("GRAFANA_CHANGED", "false"),
              "prometheus": os.environ.get("PROMETHEUS_CHANGED", "false"),
          }

          if os.environ.get("EVENT_NAME") == "workflow_dispatch":
              services = list(mapping.keys())
          else:
              for name, changed in mapping.items():
                  if changed == "true":
                      services.append(name)

          matrix = {"service": services}
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"matrix={json.dumps(matrix)}\n")
          PY

      - name: No services changed
        if: steps.set-matrix.outputs.matrix == '{"service":[]}'
        run: echo "No backend service changes detected; skipping deployment."

  build-and-deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"service":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      max-parallel: 1
    env:
      REDIS_ADDR: ${{ secrets.REDIS_ADDR }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SANDBOX_URL: ${{ secrets.SANDBOX_URL }}
      QUESTION_SERVICE_URL: ${{ secrets.QUESTION_SERVICE_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS Copilot CLI
        run: |
          set -euo pipefail
          curl -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
          chmod +x copilot
          sudo mv copilot /usr/local/bin/copilot
          copilot --version

      - name: Set up Amazon Secrets
        run: |
          set -euo pipefail

          declare -A PARAMS=(
            ["/collab/QUESTION_SERVICE_URL"]="${QUESTION_SERVICE_URL}"
            ["/collab/REDIS_ADDR"]="${REDIS_ADDR}"
            ["/collab/SANDBOX_URL"]="${SANDBOX_URL}"
            
            ["/match/REDIS_ADDR"]="${REDIS_ADDR}"

            ["/user/REDIS_URL"]="${REDIS_URL}"
            ["/user/POSTGRES_HOST"]="${POSTGRES_HOST}"
            ["/user/POSTGRES_USER"]="${POSTGRES_USER}"
            ["/user/POSTGRES_PASSWORD"]="${POSTGRES_PASSWORD}"
            ["/user/POSTGRES_DB"]="${POSTGRES_DB}"
            
            ["/voice/REDIS_ADDR"]="${REDIS_ADDR}"
          )

          for key in "${!PARAMS[@]}"; do
            value="${PARAMS[$key]}"
            if [[ -n "$value" ]]; then
              echo "Setting parameter: $key"
              aws ssm put-parameter \
                --name "$key" \
                --value "$value" \
                --type "SecureString" \
                --overwrite || exit 1
            fi
          done

      - name: Deploy ${{ matrix.service }}
        working-directory: ./copilot
        run: |
          set -euo pipefail
          copilot svc deploy --name "${{ matrix.service }}" --env "dev"
