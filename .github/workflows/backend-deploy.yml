name: backend-deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REDIS_ADDR: ${{ secrets.REDIS_ADDR }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SANDBOX_URL: ${{ secrets.SANDBOX_URL }}
      QUESTION_SERVICE_URL: ${{ secrets.QUESTION_SERVICE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Amazon Secrets
        run: |
          #!/bin/bash
          set -euo pipefail

          declare -A PARAMS=(
            ["/collab/QUESTION_SERVICE_URL"]="${{ env.QUESTION_SERVICE_URL }}"
            ["/collab/REDIS_ADDR"]="${{ env.REDIS_ADDR }}"
            ["/collab/SANDBOX_URL"]="${{ env.SANDBOX_URL }}"
            
            ["/match/REDIS_ADDR"]="${{ env.REDIS_ADDR }}"

            ["/user/REDIS_URL"]="${{ env.REDIS_URL }}"
            ["/user/POSTGRES_HOST"]="${{ env.POSTGRES_HOST }}"
            ["/user/POSTGRES_USER"]="${{ env.POSTGRES_USER }}"
            ["/user/POSTGRES_PASSWORD"]="${{ env.POSTGRES_PASSWORD }}"
            ["/user/POSTGRES_DB"]="${{ env.POSTGRES_DB }}"
            
            ["/voice/REDIS_ADDR"]="${{ env.REDIS_ADDR }}"
          )

          for key in "${!PARAMS[@]}"; do
              echo "Setting parameter: $key"
              aws ssm put-parameter \
                  --name "$key" \
                  --value "${PARAMS[$key]}" \
                  --type "SecureString" \
                  --overwrite || {
                echo "Failed to set parameter: $key"
                exit 1
              }
          done

          echo "All parameters set successfully."

      - name: Initialize services
        working-directory: ./copilot
        run: |
          #!/bin/bash
          set -euo pipefail

          # Define services
          services=(
            "collab,Backend Service,../services/collab/Dockerfile"
            "match,Backend Service,../services/match/Dockerfile"
            "question,Backend Service,../services/question/Dockerfile"
            "user,Backend Service,../services/user/Dockerfile"
            "voice,Backend Service,../services/voice/Dockerfile"
          )

          for svc in "${services[@]}"; do
            IFS=',' read -r name type dockerfile <<< "$svc"
            echo "Initializing service: $name ($type) using $dockerfile"
            
            copilot svc init --name "$name" --svc-type "$type" --dockerfile "$dockerfile" || {
              echo "ERROR: Failed to initialize $name"
              exit 1
            }
          done

          echo "All services initialized successfully."

      - name: Deploy services
        working-directory: ./copilot
        run: |
          #!/bin/bash
          set -euo pipefail

          services=(
            "collab"
            "match"
            "user"
            "question"
            "voice"
          )

          # Target environment
          env="dev"

          for svc in "${services[@]}"; do
            echo "Deploying service: $svc to environment: $env"
            
            copilot svc deploy --name "$svc" --env "$env" || {
              echo "ERROR: Failed to deploy $svc"
              exit 1
            }
          done

          echo "All services deployed successfully."
