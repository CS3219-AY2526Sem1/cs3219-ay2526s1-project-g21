{
	"info": {
		"_postman_id": "a67f4b31-ce80-4666-8cfe-5c88b63a21c1",
		"name": "Question_service_tests",
		"description": "Postman test suite for all Question Service endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28083579"
	},
	"item": [
		{
			"name": "Health Check - /healthz",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/healthz"
			},
			"response": []
		},
		{
			"name": "Readiness Check - /readyz",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/readyz"
			},
			"response": []
		},
		{
			"name": "Get All Questions (Empty List)",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/questions"
			},
			"response": []
		},
		{
			"name": "Create Question",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"two-sum-001\",\n  \"title\": \"Two Sum\",\n  \"difficulty\": \"Easy\",\n  \"topic_tags\": [\"Array\", \"Hash Table\"],\n  \"prompt_markdown\": \"Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\\n\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\n\\nYou can return the answer in any order.\",\n  \"constraints\": \"- 2 <= nums.length <= 10^4\\n- -10^9 <= nums[i] <= 10^9\\n- -10^9 <= target <= 10^9\\n- Only one valid answer exists.\",\n  \"test_cases\": [\n    {\n      \"input\": \"nums = [2,7,11,15], target = 9\",\n      \"output\": \"[0,1]\",\n      \"description\": \"Because nums[0] + nums[1] == 9, we return [0, 1].\"\n    },\n    {\n      \"input\": \"nums = [3,2,4], target = 6\",\n      \"output\": \"[1,2]\",\n      \"description\": \"Because nums[1] + nums[2] == 6, we return [1, 2].\"\n    }\n  ],\n  \"image_urls\": [],\n  \"status\": \"active\",\n  \"author\": \"leetcode\"\n}"
				},
				"url": "{{url}}/questions"
			},
			"response": []
		},
		{
			"name": "Create Question - Longest Common Subsequence",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"lcs-1143\",\n  \"title\": \"Longest Common Subsequence\",\n  \"difficulty\": \"Medium\",\n  \"topic_tags\": [\"String\", \"Dynamic Programming\"],\n  \"prompt_markdown\": \"Given two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return `0`.\\n\\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\\n\\nFor example, `\\\"ace\\\"` is a subsequence of `\\\"abcde\\\"`.\\n\\nA common subsequence of two strings is a subsequence that is common to both strings.\",\n  \"constraints\": \"- 1 <= text1.length, text2.length <= 1000\\n- text1 and text2 consist of only lowercase English characters.\",\n  \"test_cases\": [\n    {\n      \"input\": \"text1 = \\\"abcde\\\", text2 = \\\"ace\\\"\",\n      \"output\": \"3\",\n      \"description\": \"The longest common subsequence is \\\"ace\\\" and its length is 3.\"\n    },\n    {\n      \"input\": \"text1 = \\\"abc\\\", text2 = \\\"abc\\\"\",\n      \"output\": \"3\",\n      \"description\": \"The longest common subsequence is \\\"abc\\\" and its length is 3.\"\n    },\n    {\n      \"input\": \"text1 = \\\"abc\\\", text2 = \\\"def\\\"\",\n      \"output\": \"0\",\n      \"description\": \"There is no such common subsequence, so the result is 0.\"\n    }\n  ],\n  \"status\": \"active\",\n  \"author\": \"leetcode\"\n}"
				},
				"url": "http://localhost:8080/questions"
			},
			"response": []
		},
		{
			"name": "Create Question Invalid",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "invalid json"
				},
				"url": "http://localhost:8080/questions"
			},
			"response": []
		},
		{
			"name": "Get Question by ID - Two Sum",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/questions/10"
			},
			"response": []
		},
		{
			"name": "Get Question by ID - Not Found",
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/questions/99999"
			},
			"response": []
		},
		{
			"name": "Update Question - Two Sum (Change Difficulty)",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"two-sum-001\",\n  \"title\": \"Two Sum (Updated)\",\n  \"difficulty\": \"Medium\",\n  \"topic_tags\": [\"Array\", \"Hash Table\", \"Two Pointers\"],\n  \"prompt_markdown\": \"Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\\n\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\n\\nYou can return the answer in any order.\\n\\n**Follow-up:** Can you come up with an algorithm that is less than O(nÂ²) time complexity?\",\n  \"constraints\": \"- 2 <= nums.length <= 10^4\\n- -10^9 <= nums[i] <= 10^9\\n- -10^9 <= target <= 10^9\\n- Only one valid answer exists.\",\n  \"test_cases\": [\n    {\n      \"input\": \"nums = [2,7,11,15], target = 9\",\n      \"output\": \"[0,1]\",\n      \"description\": \"Because nums[0] + nums[1] == 9, we return [0, 1].\"\n    },\n    {\n      \"input\": \"nums = [3,2,4], target = 6\",\n      \"output\": \"[1,2]\",\n      \"description\": \"Because nums[1] + nums[2] == 6, we return [1, 2].\"\n    },\n    {\n      \"input\": \"nums = [3,3], target = 6\",\n      \"output\": \"[0,1]\",\n      \"description\": \"Because nums[0] + nums[1] == 6, we return [0, 1].\"\n    }\n  ],\n  \"status\": \"active\",\n  \"author\": \"leetcode\"\n}"
				},
				"url": "{{url}}/questions/1"
			},
			"response": []
		},
		{
			"name": "Get Random Question",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/questions/random"
			},
			"response": []
		},
		{
			"name": "Get Random Question - Filter by Difficulty (Easy)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?difficulty=Easy",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "difficulty",
							"value": "Easy"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Question - Filter by Difficulty (Medium)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?difficulty=Medium",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "difficulty",
							"value": "Medium"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Question - Filter by Difficulty (Hard)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?difficulty=Hard",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "difficulty",
							"value": "Hard"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Question - Filter by Single Topic",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?topic=Array",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "topic",
							"value": "Array"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Question - Filter by Multiple Topics",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?topic=Array,Hash Table",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "topic",
							"value": "Array,Hash Table"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Question - Filter by Difficulty and Topic",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?difficulty=Easy&topic=Array",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "difficulty",
							"value": "Easy"
						},
						{
							"key": "topic",
							"value": "Array"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Question - Invalid Difficulty",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?difficulty=Invalid",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "difficulty",
							"value": "Invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Random Question - No Matching Filters",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/questions/random?difficulty=Hard&topic=NonExistentTopic",
					"host": ["{{url}}"],
					"path": ["questions", "random"],
					"query": [
						{
							"key": "difficulty",
							"value": "Hard"
						},
						{
							"key": "topic",
							"value": "NonExistentTopic"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Question - LCS",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/questions/valid-parentheses-020"
			},
			"response": []
		},
		{
			"name": "Delete Question - Two Sum",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/questions/two-sum-001"
			},
			"response": []
		},
		{
			"name": "Get All Questions (Final Check)",
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/questions"
			},
			"response": []
		}
	]
}